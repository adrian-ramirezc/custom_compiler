-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from PascalParser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Program                            (0)
	Program -> Linst                                   (1)
	Linst -> Inst                                      (2)
	Linst -> Linst Inst                                (3)
	Inst -> Print ';'                                  (4)
	Inst -> ';'                                        (5)
	Inst -> Expr ';'                                   (6)
	Print -> print Expr                                (7)
	Expr -> integer                                    (8)
	Expr -> Expr '+' Expr                              (9)
	Expr -> Expr '-' Expr                              (10)
	Expr -> '(' Expr ')'                               (11)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	print          { TK _ PRINT }
	';'            { TK _ SEP }
	integer        { TK _ (INT $$) }
	'+'            { TK _ PLUS }
	'-'            { TK _ MINUS }
	'('            { TK _ LPAR }
	')'            { TK _ RPAR }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Program         rule  1
	Linst           rules 2, 3
	Inst            rules 4, 5, 6
	Print           rule  7
	Expr            rules 8, 9, 10, 11

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	print          shift, and enter state 6
	';'            shift, and enter state 7
	integer        shift, and enter state 8
	'('            shift, and enter state 9

	Program        goto state 10
	Linst          goto state 2
	Inst           goto state 3
	Print          goto state 4
	Expr           goto state 5

State 1


	print          shift, and enter state 6
	';'            shift, and enter state 7
	integer        shift, and enter state 8
	'('            shift, and enter state 9

	Linst          goto state 2
	Inst           goto state 3
	Print          goto state 4
	Expr           goto state 5

State 2

	Program -> Linst .                                  (rule 1)
	Linst -> Linst . Inst                               (rule 3)

	print          shift, and enter state 6
	';'            shift, and enter state 7
	integer        shift, and enter state 8
	'('            shift, and enter state 9
	%eof           reduce using rule 1

	Inst           goto state 17
	Print          goto state 4
	Expr           goto state 5

State 3

	Linst -> Inst .                                     (rule 2)

	print          reduce using rule 2
	';'            reduce using rule 2
	integer        reduce using rule 2
	'('            reduce using rule 2
	%eof           reduce using rule 2


State 4

	Inst -> Print . ';'                                 (rule 4)

	';'            shift, and enter state 16


State 5

	Inst -> Expr . ';'                                  (rule 6)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)

	';'            shift, and enter state 13
	'+'            shift, and enter state 14
	'-'            shift, and enter state 15


State 6

	Print -> print . Expr                               (rule 7)

	integer        shift, and enter state 8
	'('            shift, and enter state 9

	Expr           goto state 12

State 7

	Inst -> ';' .                                       (rule 5)

	print          reduce using rule 5
	';'            reduce using rule 5
	integer        reduce using rule 5
	'('            reduce using rule 5
	%eof           reduce using rule 5


State 8

	Expr -> integer .                                   (rule 8)

	';'            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	')'            reduce using rule 8


State 9

	Expr -> '(' . Expr ')'                              (rule 11)

	integer        shift, and enter state 8
	'('            shift, and enter state 9

	Expr           goto state 11

State 10

	%start_parse -> Program .                           (rule 0)

	%eof           accept


State 11

	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> '(' Expr . ')'                              (rule 11)

	'+'            shift, and enter state 14
	'-'            shift, and enter state 15
	')'            shift, and enter state 20


State 12

	Print -> print Expr .                               (rule 7)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)

	';'            reduce using rule 7
	'+'            shift, and enter state 14
	'-'            shift, and enter state 15


State 13

	Inst -> Expr ';' .                                  (rule 6)

	print          reduce using rule 6
	';'            reduce using rule 6
	integer        reduce using rule 6
	'('            reduce using rule 6
	%eof           reduce using rule 6


State 14

	Expr -> Expr '+' . Expr                             (rule 9)

	integer        shift, and enter state 8
	'('            shift, and enter state 9

	Expr           goto state 19

State 15

	Expr -> Expr '-' . Expr                             (rule 10)

	integer        shift, and enter state 8
	'('            shift, and enter state 9

	Expr           goto state 18

State 16

	Inst -> Print ';' .                                 (rule 4)

	print          reduce using rule 4
	';'            reduce using rule 4
	integer        reduce using rule 4
	'('            reduce using rule 4
	%eof           reduce using rule 4


State 17

	Linst -> Linst Inst .                               (rule 3)

	print          reduce using rule 3
	';'            reduce using rule 3
	integer        reduce using rule 3
	'('            reduce using rule 3
	%eof           reduce using rule 3


State 18

	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> Expr '-' Expr .                             (rule 10)

	';'            reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	')'            reduce using rule 10


State 19

	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr '+' Expr .                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)

	';'            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	')'            reduce using rule 9


State 20

	Expr -> '(' Expr ')' .                              (rule 11)

	';'            reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	')'            reduce using rule 11


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 12
Number of terminals: 7
Number of non-terminals: 6
Number of states: 21
